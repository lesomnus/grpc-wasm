// @generated by protobuf-ts 2.10.0 with parameter server_generic
// @generated from protobuf file "echo/echo.proto" (package "echo", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EchoService } from "./echo";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { EchoBatchResponse } from "./echo";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EchoResponse } from "./echo";
import type { EchoRequest } from "./echo";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service echo.EchoService
 */
export interface IEchoServiceClient {
    /**
     * @generated from protobuf rpc: Once(echo.EchoRequest) returns (echo.EchoResponse);
     */
    once(input: EchoRequest, options?: RpcOptions): UnaryCall<EchoRequest, EchoResponse>;
    /**
     * @generated from protobuf rpc: Many(echo.EchoRequest) returns (stream echo.EchoResponse);
     */
    many(input: EchoRequest, options?: RpcOptions): ServerStreamingCall<EchoRequest, EchoResponse>;
    /**
     * @generated from protobuf rpc: Buff(stream echo.EchoRequest) returns (echo.EchoBatchResponse);
     */
    buff(options?: RpcOptions): ClientStreamingCall<EchoRequest, EchoBatchResponse>;
    /**
     * @generated from protobuf rpc: Live(stream echo.EchoRequest) returns (stream echo.EchoResponse);
     */
    live(options?: RpcOptions): DuplexStreamingCall<EchoRequest, EchoResponse>;
}
/**
 * @generated from protobuf service echo.EchoService
 */
export class EchoServiceClient implements IEchoServiceClient, ServiceInfo {
    typeName = EchoService.typeName;
    methods = EchoService.methods;
    options = EchoService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Once(echo.EchoRequest) returns (echo.EchoResponse);
     */
    once(input: EchoRequest, options?: RpcOptions): UnaryCall<EchoRequest, EchoResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoRequest, EchoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Many(echo.EchoRequest) returns (stream echo.EchoResponse);
     */
    many(input: EchoRequest, options?: RpcOptions): ServerStreamingCall<EchoRequest, EchoResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoRequest, EchoResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Buff(stream echo.EchoRequest) returns (echo.EchoBatchResponse);
     */
    buff(options?: RpcOptions): ClientStreamingCall<EchoRequest, EchoBatchResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoRequest, EchoBatchResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Live(stream echo.EchoRequest) returns (stream echo.EchoResponse);
     */
    live(options?: RpcOptions): DuplexStreamingCall<EchoRequest, EchoResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoRequest, EchoResponse>("duplex", this._transport, method, opt);
    }
}
