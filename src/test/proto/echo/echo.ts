import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// @generated by protobuf-ts 2.10.0 with parameter server_generic
// @generated from protobuf file "echo/echo.proto" (package "echo", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message echo.Error
 */
export interface Error {
	/**
	 * @generated from protobuf field: uint32 code = 1;
	 */
	code: number;
	/**
	 * @generated from protobuf field: string message = 2;
	 */
	message: string;
}
/**
 * @generated from protobuf message echo.Echo
 */
export interface Echo {
	/**
	 * @generated from protobuf field: echo.Error error = 1;
	 */
	error?: Error;
	/**
	 * @generated from protobuf field: string message = 2;
	 */
	message: string;
	/**
	 * @generated from protobuf field: uint64 sequence = 3;
	 */
	sequence: bigint;
	/**
	 * @generated from protobuf field: google.protobuf.Timestamp date_created = 15;
	 */
	dateCreated?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
	constructor() {
		super("echo.Error", [
			{ no: 1, name: "code", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
			{ no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<Error>): Error {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.code = 0;
		message.message = "";
		if (value !== undefined)
			reflectionMergePartial<Error>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: Error,
	): Error {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* uint32 code */ 1:
					message.code = reader.uint32();
					break;
				case /* string message */ 2:
					message.message = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: Error,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* uint32 code = 1; */
		if (message.code !== 0) writer.tag(1, WireType.Varint).uint32(message.code);
		/* string message = 2; */
		if (message.message !== "")
			writer.tag(2, WireType.LengthDelimited).string(message.message);
		let u = options.writeUnknownFields;
		if (u !== false)
			(u == true ? UnknownFieldHandler.onWrite : u)(
				this.typeName,
				message,
				writer,
			);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message echo.Error
 */
export const Error = new Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Echo$Type extends MessageType<Echo> {
	constructor() {
		super("echo.Echo", [
			{ no: 1, name: "error", kind: "message", T: () => Error },
			{ no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
			{
				no: 3,
				name: "sequence",
				kind: "scalar",
				T: 4 /*ScalarType.UINT64*/,
				L: 0 /*LongType.BIGINT*/,
			},
			{ no: 15, name: "date_created", kind: "message", T: () => Timestamp },
		]);
	}
	create(value?: PartialMessage<Echo>): Echo {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.message = "";
		message.sequence = 0n;
		if (value !== undefined) reflectionMergePartial<Echo>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: Echo,
	): Echo {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* echo.Error error */ 1:
					message.error = Error.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.error,
					);
					break;
				case /* string message */ 2:
					message.message = reader.string();
					break;
				case /* uint64 sequence */ 3:
					message.sequence = reader.uint64().toBigInt();
					break;
				case /* google.protobuf.Timestamp date_created */ 15:
					message.dateCreated = Timestamp.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.dateCreated,
					);
					break;
				default:
					let u = options.readUnknownField;
					if (u === "throw")
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: Echo,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* echo.Error error = 1; */
		if (message.error)
			Error.internalBinaryWrite(
				message.error,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* string message = 2; */
		if (message.message !== "")
			writer.tag(2, WireType.LengthDelimited).string(message.message);
		/* uint64 sequence = 3; */
		if (message.sequence !== 0n)
			writer.tag(3, WireType.Varint).uint64(message.sequence);
		/* google.protobuf.Timestamp date_created = 15; */
		if (message.dateCreated)
			Timestamp.internalBinaryWrite(
				message.dateCreated,
				writer.tag(15, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false)
			(u == true ? UnknownFieldHandler.onWrite : u)(
				this.typeName,
				message,
				writer,
			);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message echo.Echo
 */
export const Echo = new Echo$Type();
/**
 * @generated ServiceType for protobuf service echo.EchoService
 */
export const EchoService = new ServiceType("echo.EchoService", [
	{ name: "Unary", options: {}, I: Echo, O: Echo },
	{
		name: "ClientStream",
		clientStreaming: true,
		options: {},
		I: Echo,
		O: Echo,
	},
	{
		name: "ServerStream",
		serverStreaming: true,
		options: {},
		I: Echo,
		O: Echo,
	},
	{
		name: "BidiStream",
		serverStreaming: true,
		clientStreaming: true,
		options: {},
		I: Echo,
		O: Echo,
	},
]);
